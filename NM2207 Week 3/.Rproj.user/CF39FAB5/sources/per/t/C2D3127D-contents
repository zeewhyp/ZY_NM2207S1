---
title: "Week-3: Code-along"
author: "Phua Zong Yao"
date: "`r Sys.Date()`"
output:
  html_document:
  df_print: paged
pdf_document: default
---

  ```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


# I. Code to edit and execute

**To be submitted on canvas before attending the tutorial**


### Loading packages

```{r, eval=FALSE,echo=TRUE}
# Load package tidyverse

library(tidyverse)

```

### Assigning values to variables

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Example a.: execute this example
x <- 'A'
x
```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Complete the code for Example b and execute it

x <- 'Apple'
x

```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Complete the code for Example c and execute it

x <- FALSE
x

```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Complete the code for Example d and execute it

x <- 5L
x

```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Complete the code for Example e and execute it

x <- 5
x

```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Complete the code for Example f and execute it

x <- 1i
x

```

### Checking the type of variables

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Example a.: execute this example
x <- 'A'
typeof(x)

```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Complete the code for Example b and execute it

x <- 'Apple'
typeof(x)

```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Complete the code for Example c and execute it

x <- FALSE
typeof(x)

```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Complete the code for Example d and execute it

x <- 5L
typeof(x)

```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Complete the code for Example e and execute it

x <- 5
typeof(x)

```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Complete the code for Example f and execute it

x <- 1i
typeof(x)

```

### Need for data types

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# import the cat-lovers data from the csv file you downloaded from canvas

read_csv("cat-lovers.csv")
cat_lovers <- read_csv("cat-lovers.csv")


```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Compute the mean of the number of cats: execute this command

mean(cat_lovers$number_of_cats)

```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Get more information about the mean() command using ? operator

?mean
knitr::include_graphics("arithmeticmean.PNG")

```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Convert the variable number_of_cats using as.integer()

mean(as.integer(cat_lovers$number_of_cats))

```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Display the elements of the column number_of_cats 

cat_lovers$number_of_cats

```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Display the elements of the column number_of_cats after converting it using as.numeric()

as.integer(cat_lovers$number_of_cats)

```

### Create an empty vector

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Empty vector

x <- vector()

# Type of the empty vector
typeof(x)
```

### Create vectors of type logical

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Method 1
x<-vector("logical",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Method 2
x<-logical(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Method 3
x<-c(TRUE,FALSE,TRUE,FALSE,TRUE)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
```

### Create vectors of type character

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Method 1
 x<-vector("character",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Method 2
x <-character(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Method 3

# Display the contents of x

# Display the type of x
```

### Create vectors of type integer

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Method 1

# Display the contents of x

# Display the type of x
print(typeof(x))
```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Method 2

# Display the contents of x
print(x)
# Display the type of x

```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Method 3

# Display the contents of x

# Display the type of x
```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Method 4

# Display the contents of x

# Display the type of x
```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Method 5

# Display the contents of x

# Display the type of x
```

### Create vectors of type double

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Method 1

# Display the contents of x

# Display the type of x
```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Method 2

# Display the contents of x

# Display the type of x
```

```{r,warning=TRUE,message=FALSE,eval=FALSE,echo=TRUE}
# Method 3

# Display the contents of x

# Display the type of x
```

### Implicit coercion

#### Example 1

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Create a vector

# Check the type of x

```

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Add a character to the vector

# Check the type of x

```

#### Example 2

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Create a vector

# Check the type of x

```

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Add a number to the vector

# Check the type of x

```

#### Example 3

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Create a vector

# Check the type of x

```

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Add a logical value to the vector

# Check the type of x

```


#### Example 4

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Create a vector

# Check the type of x

```

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Add a number to the vector

# Check the type of x

```

### Explicit coercion

#### Example 1

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Create a vector

# Check the type of x

```

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Convert the vector to type character

# Check the type of x

```

#### Example 2

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Create a vector

# Check the type of x

```

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Convert the vector to type double

# Check the type of x

```

### Accessing elements of the vector

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Create a vector
x <- c(1,10,9,8,1,3,5)
```

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Access one element with index 3

```

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Access elements with consecutive indices, 2 to 4: 2,3,4

```

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Access elements with non-consecutive indices, 1,3,5

```

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Access elements using logical vector
x[c(TRUE,FALSE,FALSE,TRUE,FALSE,FALSE,TRUE)]
```

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Access elements using the conditional operator <

```

### Examining vectors

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Display the length of the vector
print(length(x))
# Display the type of the vector
print(typeof(x))
# Display the structure of the vector
print(str(x))
```

### Lists

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Initialise a named list
my_pie = list(type="key lime", diameter=7, is.vegetarian=TRUE)
# display the list
my_pie
```

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Print the names of the list

```

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Retrieve the element named type

```

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Retrieve a truncated list

```

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Retrieve the element named type

```

#### Exploring data-sets

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
```

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Catch a glimpse of the data-set: see how the rows are stacked one below another
glimpse(loans_full_schema)
```


```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Selecting numeric variables
loans <- loans_full_schema %>% # <-- pipe operator
  select(paid_total, term, interest_rate,
         annual_income,paid_late_fees,debt_to_income)
# View the columns stacked one below another
glimpse(loans)
```

```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Selecting categoric variables
loans <- loans_full_schema %>% 
  select( ) # type the chosen columns as in the lecture slide
# View the columns stacked one below another
glimpse(loans)
```