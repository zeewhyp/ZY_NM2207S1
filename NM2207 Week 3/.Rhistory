# Access elements using the conditional operator <
x[x<10]
# Display the length of the vector
print(length(x))
# Display the type of the vector
print(typeof(x))
# Display the structure of the vector
print(str(x))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
# complete the code to generate the plot
ggplot(playlist_data) +
aes(x=Age,y=Rating) +
labs(x='Age',y='Rating',title ="Age vs Rating",caption = 'The distribution of the age and rating is quite evenly spread out') +
geom_point(shape=20)
# Initialise a named list
my_pie = list(type="key lime", diameter=7, is.vegetarian=TRUE)
# display the list
my_pie
# Print the names of the list
# Initialise a named list
my_pie = list(type="key lime", diameter=7, is.vegetarian=TRUE)
# display the list
my_pie
# Print the names of the list
names(my_pie)
# Retrieve the element named type
my_pie$type
# Retrieve a truncated list
my_pie['type']
# Retrieve the element named type
my_pie[['type']]
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
# Catch a glimpse of the data-set: see how the rows are stacked one below another
glimpse(loans_full_schema)
# Selecting numeric variables
loans <- loans_full_schema %>% # <-- pipe operator
select(paid_total, term, interest_rate,
annual_income,paid_late_fees,debt_to_income)
# View the columns stacked one below another
glimpse(loans)
# Selecting categoric variables
loans <- loans_full_schema %>%
select( ) # type the chosen columns as in the lecture slide
# View the columns stacked one below another
glimpse(loans)
# Selecting categoric variables
loans <- loans_full_schema %>%
select(grade,state,homeownership,disbursement_method ) # type the chosen columns as in the lecture slide
# View the columns stacked one below another
glimpse(loans)
# Add a number to the vector
x<-c(x,9)
# Check the type of x
print(typeof(x))
# Create a vector
x <- c(1,10,9,8,1,3,5)
# Access one element with index 3
x[3]
# Create a vector
x <- c(1,10,9,8,1,3,5)
# Access one element with index 3
x[4]
# Access one element with index 3
x[3]
# Access one element with index 3
x[3]
# Selecting categoric variables
loans <- loans_full_schema %>%
select(grade,state,homeownership,disbursement_method ) # type the chosen columns as in the lecture slide
# Selecting categoric variables
loans <- loans_full_schema %>% # <-- pipe operator
select(grade,state,homeownership,disbursement_method ) # type the chosen columns as in the lecture slide
# Selecting numeric variables
loans <- loans_full_schema %>% # <-- pipe operator
select(paid_total, term, interest_rate,
annual_income,paid_late_fees,debt_to_income)
# Catch a glimpse of the data-set: see how the rows are stacked one below another
glimpse(loans_full_schema)
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
# Catch a glimpse of the data-set: see how the rows are stacked one below another
glimpse(loans_full_schema)
# Selecting numeric variables
loans <- loans_full_schema %>% # <-- pipe operator
select(paid_total, term, interest_rate,
annual_income,paid_late_fees,debt_to_income)
# View the columns stacked one below another
glimpse(loans)
# Selecting categoric variables
loans <- loans_full_schema %>% # <-- pipe operator
select(grade,state,homeownership,disbursement_method ) # type the chosen columns as in the lecture slide
# View the columns stacked one below another
glimpse(loans)
# Selecting categoric variables
loans <- loans_full_schema %>%
select(grade,state,homeownership,disbursement_method ) # type the chosen columns as in the lecture slide
# View the columns stacked one below another
glimpse(loans)
# Selecting categoric variables
loans <- loans_full_schema %>% # <-- pipe operator
select(grade,state,homeownership,disbursement_method ) # type the chosen columns as in the lecture slide
# View the columns stacked one below another
glimpse(loans)
# Selecting categoric variables
loans <- loans_full_schema %>%
select(grade,state,homeownership,disbursement_method ) # type the chosen columns as in the lecture slide
# View the columns stacked one below another
glimpse(loans)
# Selecting categoric variables
loans <- loans_full_schema %>% # <-- pipe operator
select(grade,state,homeownership,disbursement_method ) # type the chosen columns as in the lecture slide
# View the columns stacked one below another
glimpse(loans)
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
install.packages("openintro")
# Retrieve the element named type
my_pie[['type']]
# Initialise a named list
my_pie = list(type="key lime", diameter=7, is.vegetarian=TRUE)
# display the list
my_pie
# Initialise a named list
my_pie = list(type="key lime", diameter=7, is.vegetarian=TRUE)
# display the list
my_pie
# Print the names of the list
names(my_pie)
# Retrieve the element named type
my_pie$type
# Retrieve a truncated list
my_pie['type']
# Retrieve the element named type
my_pie[['type']]
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
# Catch a glimpse of the data-set: see how the rows are stacked one below another
glimpse(loans_full_schema)
# Selecting numeric variables
loans <- loans_full_schema %>% # <-- pipe operator
select(paid_total, term, interest_rate,
annual_income,paid_late_fees,debt_to_income)
# View the columns stacked one below another
glimpse(loans)
# Selecting categoric variables
loans <- loans_full_schema %>% # <-- pipe operator
select(grade,state,homeownership,disbursement_method ) # type the chosen columns as in the lecture slide
# View the columns stacked one below another
glimpse(loans)
# Catch a glimpse of the data-set: see how the rows are stacked one below another
glimpse(loans_full_schema)
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
# Selecting categoric variables
loans <- loans_full_schema %>% # <-- pipe operator
select(grade,state,homeownership,disbursement_method ) # type the chosen columns as in the lecture slide
# View the columns stacked one below another
glimpse(loans)
# Install package
install.packages("openintro", repos = "http://cran.us.r-project.org")
library("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
install.packages("openintro", repos = "http://cran.us.r-project.org")
# Install package
install.packages("openintro", repos = "http://cran.us.r-project.org")
library("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
# Enter code here
ages <- vector(25,30,22,28,33)
# Enter code here
ages <- c(25,30,22,28,33)
# Enter code here
ages <- c(25,30,22,28,33)
# Enter code here
ages <- c(25,30,22,28,33)
typeof(ages)
# Enter code here
ages <- c(25,30,22,28,33)
print(ages)
# Enter code here
student_info<-list("Alice","Bob","Catherine")
# Enter code here
student_info<-list("Alice","Bob","Catherine",85,92,78,TRUE,TRUE,FALSE)
# Enter code here
student_info<-list("Alice","Bob","Catherine",85,92,78,TRUE,TRUE,FALSE)
print(student_info)
# Enter code here
data <- (10,15.5,"20",TRUE)
# Enter code here
data <- c(10,15.5,"20",TRUE)
# Enter code here
data <- c(10,15.5,"20",TRUE)
typeof(data)
# Enter code here
data <- c(10,15.5,"20",TRUE)
typeof(data[1])
# Enter code here
data <- c(10,15.5,"20",TRUE)
typeof(data[1])
typeof(data[2])
# Enter code here
data <- c(10,15.5,"20",TRUE)
typeof(data[1])
typeof(data[2])
typeof(data[3])
# Enter code here
data <- c(10,15.5,"20",TRUE)
# Enter code here
data <- c(10,15.5,"20",TRUE)
typeof(data)
# Enter code here
data <- c(10,15.5,"20",TRUE)
data[1]
# Enter code here
data <- c(10,15.5,"20",TRUE)
typeof(data[1])
# Enter code here
data <- c(10,15.5,"20",TRUE)
typeof(data[1])
typeof(data[4])
# Enter code here
student_info<-list("Alice","Bob","Catherine",85,92,78,TRUE,TRUE,FALSE)
print(student_info)
# Enter code here
prices <- c(20.5,15,"25")
print(prices)
# Enter code here
prices <- c(20.5,15,"25")
typeof(prices)
# Enter code here
prices <- c(20.5,15,"25")
typeof(prices)
x <-("25")
typeof(x)
# Enter code here
prices <- c(20.5,15,"25")
typeof(prices)
x <-(25)
typeof(x)
# Enter code here
prices <- c(20.5,15,"25")
x <- ("25")
x <- as.numeric(x)
typeof(prices)
# Enter code here
prices <- c(20.5,15,"25")
x <- ("25")
x <- as.numeric(x)
typeof(x)
# Enter code here
prices <- c(20.5,15,"25")
x <- ("25")
x <- as.numeric(x)
prices <- c(20.5,15,x)
typeof(prices)
# Enter code here
prices <- c(20.5,15,"25")
x <- ("25")
x <- as.numeric(x)
prices <- c(20.5,15,x)
typeof(prices)
# Enter code here
data <- c(10, 15.5, "20", TRUE)
typeof(data[1])
typeof(data[4])
# Enter code here
data <- c(10, 15.5, "20", TRUE)
# Enter code here
prices <- c(20.5,15,"25")
prices <- as.numeric(20.5,15,"25")
print(prices)
# Enter code here
prices <- c(20.5, 15, "25")
prices <- as.numeric(20.5, 15, "25")
print(prices)
# Enter code here
prices <- c( 20.5, 15, "25")
prices <- as.numeric(20.5, 15, "25")
print(prices)
# Enter code here
ages <- c(25,30,22,28,33)
print(ages)
# Enter code here
student_info<-list(studentname=c("Alice","Bob","Catherine")studentscore=(85,92,78) studentpassed=(TRUE,TRUE,FALSE))
# Enter code here
student_info<-list(studentname=c("Alice","Bob","Catherine") studentscore=(85,92,78) studentpassed=(TRUE,TRUE,FALSE))
# Enter code here
student_info<-list(studentname=c("Alice","Bob","Catherine"), studentscore=(85,92,78), studentpassed=(TRUE,TRUE,FALSE))
# Enter code here
student_info<-list(studentname=c("Alice","Bob","Catherine"), studentscore=c(85,92,78), studentpassed=c(TRUE,TRUE,FALSE))
print(student_info)
# Enter code here
data <- c(10, 15.5, "20", TRUE)
typeof(data[1])
typeof(data[2])
typeof(data[3])
typeof(data[4])
# Enter code here
prices <- c( 20.5, 15, "25")
prices <- as.numeric(20.5, 15, "25")
print(prices)
# Enter code here
prices <- c(20.5,15,"25")
prices <- as.numeric(20.5, 15, "25")
print(prices)
# Enter code here
prices <- c(20.5,15,"25")
prices <- as.numeric(prices)
print(prices)
# Enter code here
prices <- c(20.5,15,"25")
prices <- as.numeric(prices)
# Enter code here
prices <- c(20.5,15,"25")
prices <- as.numeric(prices)
typeof(prices)
# Enter code here
x1 <- c(5,10,15)
x2 <- c("apple","banana","cherry")
An implicit coercion is an automatic conversion of values by r from one datatype to another.
# Enter code here
x1 <- c(5,10,15)
x2 <- c("apple","banana","cherry")
# Enter code here
x1 <- c(5,10,15)
x2 <- c("apple","banana","cherry")
x3 <- c(x1,x2)
# Enter code here
x1 <- c(5,10,15)
x2 <- c("apple","banana","cherry")
x3 <- c(x1,x2)
print(x3)
# Enter code here
numbers <- c(7,12.5,"15.7")
print(numbers)
# Enter code here
numbers <- c(7,12.5,"15.7")
sum(numbers)
# Enter code here
numbers <- c(7,12.5,"15.7")
print(sum(numbers))
# Enter code here
numbers <- c(7,12.5,"15.7")
# Enter code here
numbers <- c(7,12.5,"15.7")
print(numbers)
# Enter code here
numbers <- c(7,12.5,"15.7")
numbers <- as.numeric(numbers)
typeof(numbers)
# Enter code here
numbers <- c(7,12.5,"15.7")
numbers <- as.numeric(numbers)
sum(numbers)
# Enter code here
numbers <- c(7,12.5,"15.7")
numbers <- as.numeric(numbers)
sum(numbers)
# Enter code here
numbers <- c(7,12.5,"15.7")
numbers <- as.numeric(numbers)
sum(numbers)
# Enter code here
grades <- c(85,90.5,"75.2")
# Enter code here
grades <- c(85,90.5,"75.2")
grades <- as.numeric(grades)
mean(grades)
If you directly calculate
# Enter code here
mixed_data <- list(number=c(10,20,30), colour=c("red","green","blue"), logic=c(TRUE,FALSE,TRUE)))
# Enter code here
mixed_data<-list(number=c(10,20,30), colour=c("red","green","blue"), logic=c(TRUE,FALSE,TRUE)))
# Enter code here
mixed_data<-list(number=c(10,20,30), colour=c("red","green","blue"), logic=c(TRUE,FALSE,TRUE))
# Enter code here
mixed_data<-list(number=c(10,20,30), colour=c("red","green","blue"), logic=c(TRUE,FALSE,TRUE))
mixed_data <- as.numeric(mixed_data)
# Enter code here
mixed_data<-list(number=c(10,20,30), colour=c("red","green","blue"), logic=c(TRUE,FALSE,TRUE))
mean(mixed_data$number)
# Enter code here
student_info<-list(studentname=c("Alice","Bob","Catherine"), studentscore=c(85,92,78), studentpassed=c(TRUE,TRUE,FALSE))
print(student_info)
# Enter code here
student_info<-list(studentname=c("Alice","Bob","Catherine"), studentscore=c(85,92,78), studentpassed=c(TRUE,TRUE,FALSE))
student_info$studentscore[2]
# Enter code here
student_info<-list(studentname=c("Alice","Bob","Catherine"), studentscore=c(85,92,78), studentpassed=c(TRUE,TRUE,FALSE))
print(student_info$studentscore[2])
# Enter code here
nnumeric <- c(1,2,3,4,5,6)
print(nnumeric)
# Enter code here
nnumeric <- c(1,2,3,4,5,6)
nnumeric[6]
# Enter code here
nnumeric <- c(1,2,3,4,5,6,7)
nnumeric[6]
# Enter code here
nnumeric <- c(1,2,3,4,5,6,7)
length(nnumeric)
# Enter code here
nnumeric <- c(1,2,3,4,5,6,7)
print(nnumeric[length(nnumeric)])
# Enter code here
nnumeric <- c(1,2,3,4,5,6,7,8)
print(nnumeric[length(nnumeric)])
# Enter code here
words <- c("apple", "banana", "cherry", "apple")
# Enter code here
words <- c("apple", "banana", "cherry", "apple")
which(words == "apple")
# Enter code here
ages <- c(28,29,30,31,32,33,34)
# Enter code here
ages <- c(28,29,30,31,32,33,34)
ages[ages>30]
# Enter code here
sequence <-1:20
seq(from=3,to=20,by=3)
# Enter code here
sequence <-1:10
seq(from=4,to=10,by=4)
# Enter code here
fruits <- c("banana","strawberry","watermelon","pear"","pineapple")
# Enter code here
fruits <- c("banana","strawberry","watermelon","pear","pineapple")
# Enter code here
fruits <- c("banana","strawberry","watermelon","pear","pineapple")
long_names <- nchar(fruits)>6
fruits(long_names)
# Enter code here
fruits <- c("banana","strawberry","watermelon","pear","pineapple")
long_names <- nchar (fruits)>6
fruits(long_names)
# Enter code here
fruits <- c("banana","strawberry","watermelon","pear","pineapple")
long_names <- nchar(fruits)>6
fruits(long_names)
# Enter code here
fruits <- c("banana","strawberry","watermelon","pear","pineapple")
long_names <- nchar(fruits)>6
print(fruits(long_names))
# Enter code here
fruits <- c("banana","strawberry","watermelon","pear","pineapple")
long_names <- nchar(fruits)>6
fruits[long_names]
# Enter code here
numeric <- c(1,2,3,4,5,10,20,40)
divisible_by_5 <- (numeric %% 5) == 0
numeric[divisible_by_5]
# Enter code here
vector1 <- c(2,4,6,51,69,99)
vector2 <- c(3,12,15,27,31,84)
greater_vec <- vector1 > vector2
print(greater_vec)
# Enter code here
numeric <- c(1,2,3,4,5,10,20,40,100,99)
divisible_by_5 <- (numeric %% 5) == 0
numeric[divisible_by_5]
# Enter code here
temperature <- c(90,100,60,70,120,130)
hot_days <- temperatures>90
# Enter code here
temperatures <- c(90,100,60,70,120,130)
hot_days <- temperatures>90
sum(hot_days)
# Enter code here
data <- c(10,NA,15,20)
print(is.na(num_vec2[2]))
# Enter code here
data <- c(10,NA,15,20)
print(is.na(data[2]))
# Enter code here
sequence <-1:20
sequence[seq(from=3,to=20,by=3)]
